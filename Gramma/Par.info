-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from Gramma/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Pidentifier -> L_Pidentifier                       (1)
	Number -> L_Number                                 (2)
	Program -> 'VAR' ListDeclaration 'BEGIN' ListCommand 'END'   (3)
	Program -> 'BEGIN' ListCommand 'END'               (4)
	ListDeclaration -> Declaration                     (5)
	ListDeclaration -> Declaration ',' ListDeclaration   (6)
	Declaration -> Pidentifier                         (7)
	Declaration -> Pidentifier '[' Number ':' Number ']'   (8)
	ListCommand -> Command                             (9)
	ListCommand -> Command ListCommand                 (10)
	Command -> Identifier 'ASSIGN' Expression ';'      (11)
	Command -> 'IF' Condition 'THEN' ListCommand 'ELSE' ListCommand 'ENDIF'   (12)
	Command -> 'IF' Condition 'THEN' ListCommand 'ENDIF'   (13)
	Command -> 'WHILE' Condition 'DO' ListCommand 'ENDWHILE'   (14)
	Command -> 'REPEAT' ListCommand 'UNTIL' Condition ';'   (15)
	Command -> 'FOR' Pidentifier 'FROM' Value 'TO' Value 'DO' ListCommand 'ENDFOR'   (16)
	Command -> 'FOR' Pidentifier 'FROM' Value 'DOWNTO' Value 'DO' ListCommand 'ENDFOR'   (17)
	Command -> 'READ' Identifier ';'                   (18)
	Command -> 'WRITE' Value ';'                       (19)
	Expression -> Value                                (20)
	Expression -> Value 'PLUS' Value                   (21)
	Expression -> Value 'MINUS' Value                  (22)
	Expression -> Value 'TIMES' Value                  (23)
	Expression -> Value 'DIV' Value                    (24)
	Expression -> Value 'MOD' Value                    (25)
	Condition -> Value 'EQ' Value                      (26)
	Condition -> Value 'NEQ' Value                     (27)
	Condition -> Value 'LE' Value                      (28)
	Condition -> Value 'GE' Value                      (29)
	Condition -> Value 'LEQ' Value                     (30)
	Condition -> Value 'GEQ' Value                     (31)
	Value -> Number                                    (32)
	Value -> Identifier                                (33)
	Identifier -> Pidentifier                          (34)
	Identifier -> Pidentifier '[' Pidentifier ']'      (35)
	Identifier -> Pidentifier '[' Number ']'           (36)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	','            { PT _ (TS _ 1) }
	':'            { PT _ (TS _ 2) }
	';'            { PT _ (TS _ 3) }
	'ASSIGN'       { PT _ (TS _ 4) }
	'BEGIN'        { PT _ (TS _ 5) }
	'DIV'          { PT _ (TS _ 6) }
	'DO'           { PT _ (TS _ 7) }
	'DOWNTO'       { PT _ (TS _ 8) }
	'ELSE'         { PT _ (TS _ 9) }
	'END'          { PT _ (TS _ 10) }
	'ENDFOR'       { PT _ (TS _ 11) }
	'ENDIF'        { PT _ (TS _ 12) }
	'ENDWHILE'     { PT _ (TS _ 13) }
	'EQ'           { PT _ (TS _ 14) }
	'FOR'          { PT _ (TS _ 15) }
	'FROM'         { PT _ (TS _ 16) }
	'GE'           { PT _ (TS _ 17) }
	'GEQ'          { PT _ (TS _ 18) }
	'IF'           { PT _ (TS _ 19) }
	'LE'           { PT _ (TS _ 20) }
	'LEQ'          { PT _ (TS _ 21) }
	'MINUS'        { PT _ (TS _ 22) }
	'MOD'          { PT _ (TS _ 23) }
	'NEQ'          { PT _ (TS _ 24) }
	'PLUS'         { PT _ (TS _ 25) }
	'READ'         { PT _ (TS _ 26) }
	'REPEAT'       { PT _ (TS _ 27) }
	'THEN'         { PT _ (TS _ 28) }
	'TIMES'        { PT _ (TS _ 29) }
	'TO'           { PT _ (TS _ 30) }
	'UNTIL'        { PT _ (TS _ 31) }
	'VAR'          { PT _ (TS _ 32) }
	'WHILE'        { PT _ (TS _ 33) }
	'WRITE'        { PT _ (TS _ 34) }
	'['            { PT _ (TS _ 35) }
	']'            { PT _ (TS _ 36) }
	L_Pidentifier  { PT _ (T_Pidentifier _) }
	L_Number       { PT _ (T_Number $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Pidentifier     rule  1
	Number          rule  2
	Program         rules 3, 4
	ListDeclaration rules 5, 6
	Declaration     rules 7, 8
	ListCommand     rules 9, 10
	Command         rules 11, 12, 13, 14, 15, 16, 17, 18, 19
	Expression      rules 20, 21, 22, 23, 24, 25
	Condition       rules 26, 27, 28, 29, 30, 31
	Value           rules 32, 33
	Identifier      rules 34, 35, 36

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'BEGIN'        shift, and enter state 4
	'VAR'          shift, and enter state 5

	Program        goto state 3

State 1


	L_Pidentifier  shift, and enter state 2


State 2

	Pidentifier -> L_Pidentifier .                      (rule 1)

	','            reduce using rule 1
	';'            reduce using rule 1
	'ASSIGN'       reduce using rule 1
	'BEGIN'        reduce using rule 1
	'DIV'          reduce using rule 1
	'DO'           reduce using rule 1
	'DOWNTO'       reduce using rule 1
	'EQ'           reduce using rule 1
	'FROM'         reduce using rule 1
	'GE'           reduce using rule 1
	'GEQ'          reduce using rule 1
	'LE'           reduce using rule 1
	'LEQ'          reduce using rule 1
	'MINUS'        reduce using rule 1
	'MOD'          reduce using rule 1
	'NEQ'          reduce using rule 1
	'PLUS'         reduce using rule 1
	'THEN'         reduce using rule 1
	'TIMES'        reduce using rule 1
	'TO'           reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> 'BEGIN' . ListCommand 'END'              (rule 4)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 10
	Command        goto state 11
	Identifier     goto state 12

State 5

	Program -> 'VAR' . ListDeclaration 'BEGIN' ListCommand 'END'    (rule 3)

	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 6
	ListDeclarationgoto state 7
	Declaration    goto state 8

State 6

	Declaration -> Pidentifier .                        (rule 7)
	Declaration -> Pidentifier . '[' Number ':' Number ']'    (rule 8)

	','            reduce using rule 7
	'BEGIN'        reduce using rule 7
	'['            shift, and enter state 35


State 7

	Program -> 'VAR' ListDeclaration . 'BEGIN' ListCommand 'END'    (rule 3)

	'BEGIN'        shift, and enter state 34


State 8

	ListDeclaration -> Declaration .                    (rule 5)
	ListDeclaration -> Declaration . ',' ListDeclaration    (rule 6)

	','            shift, and enter state 33
	'BEGIN'        reduce using rule 5


State 9

	Identifier -> Pidentifier .                         (rule 34)
	Identifier -> Pidentifier . '[' Pidentifier ']'     (rule 35)
	Identifier -> Pidentifier . '[' Number ']'          (rule 36)

	';'            reduce using rule 34
	'ASSIGN'       reduce using rule 34
	'DIV'          reduce using rule 34
	'DO'           reduce using rule 34
	'DOWNTO'       reduce using rule 34
	'EQ'           reduce using rule 34
	'GE'           reduce using rule 34
	'GEQ'          reduce using rule 34
	'LE'           reduce using rule 34
	'LEQ'          reduce using rule 34
	'MINUS'        reduce using rule 34
	'MOD'          reduce using rule 34
	'NEQ'          reduce using rule 34
	'PLUS'         reduce using rule 34
	'THEN'         reduce using rule 34
	'TIMES'        reduce using rule 34
	'TO'           reduce using rule 34
	'['            shift, and enter state 32


State 10

	Program -> 'BEGIN' ListCommand . 'END'              (rule 4)

	'END'          shift, and enter state 31


State 11

	ListCommand -> Command .                            (rule 9)
	ListCommand -> Command . ListCommand                (rule 10)

	'ELSE'         reduce using rule 9
	'END'          reduce using rule 9
	'ENDFOR'       reduce using rule 9
	'ENDIF'        reduce using rule 9
	'ENDWHILE'     reduce using rule 9
	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'UNTIL'        reduce using rule 9
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 30
	Command        goto state 11
	Identifier     goto state 12

State 12

	Command -> Identifier . 'ASSIGN' Expression ';'     (rule 11)

	'ASSIGN'       shift, and enter state 29


State 13

	Command -> 'FOR' . Pidentifier 'FROM' Value 'TO' Value 'DO' ListCommand 'ENDFOR'    (rule 16)
	Command -> 'FOR' . Pidentifier 'FROM' Value 'DOWNTO' Value 'DO' ListCommand 'ENDFOR'    (rule 17)

	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 28

State 14

	Command -> 'IF' . Condition 'THEN' ListCommand 'ELSE' ListCommand 'ENDIF'    (rule 12)
	Command -> 'IF' . Condition 'THEN' ListCommand 'ENDIF'    (rule 13)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Condition      goto state 27
	Value          goto state 24
	Identifier     goto state 21

State 15

	Command -> 'READ' . Identifier ';'                  (rule 18)

	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	Identifier     goto state 26

State 16

	Command -> 'REPEAT' . ListCommand 'UNTIL' Condition ';'    (rule 15)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 25
	Command        goto state 11
	Identifier     goto state 12

State 17

	Command -> 'WHILE' . Condition 'DO' ListCommand 'ENDWHILE'    (rule 14)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Condition      goto state 23
	Value          goto state 24
	Identifier     goto state 21

State 18

	Command -> 'WRITE' . Value ';'                      (rule 19)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 20
	Identifier     goto state 21

State 19

	Value -> Number .                                   (rule 32)

	';'            reduce using rule 32
	'DIV'          reduce using rule 32
	'DO'           reduce using rule 32
	'DOWNTO'       reduce using rule 32
	'EQ'           reduce using rule 32
	'GE'           reduce using rule 32
	'GEQ'          reduce using rule 32
	'LE'           reduce using rule 32
	'LEQ'          reduce using rule 32
	'MINUS'        reduce using rule 32
	'MOD'          reduce using rule 32
	'NEQ'          reduce using rule 32
	'PLUS'         reduce using rule 32
	'THEN'         reduce using rule 32
	'TIMES'        reduce using rule 32
	'TO'           reduce using rule 32


State 20

	Command -> 'WRITE' Value . ';'                      (rule 19)

	';'            shift, and enter state 54


State 21

	Value -> Identifier .                               (rule 33)

	';'            reduce using rule 33
	'DIV'          reduce using rule 33
	'DO'           reduce using rule 33
	'DOWNTO'       reduce using rule 33
	'EQ'           reduce using rule 33
	'GE'           reduce using rule 33
	'GEQ'          reduce using rule 33
	'LE'           reduce using rule 33
	'LEQ'          reduce using rule 33
	'MINUS'        reduce using rule 33
	'MOD'          reduce using rule 33
	'NEQ'          reduce using rule 33
	'PLUS'         reduce using rule 33
	'THEN'         reduce using rule 33
	'TIMES'        reduce using rule 33
	'TO'           reduce using rule 33


State 22

	Number -> L_Number .                                (rule 2)

	':'            reduce using rule 2
	';'            reduce using rule 2
	'DIV'          reduce using rule 2
	'DO'           reduce using rule 2
	'DOWNTO'       reduce using rule 2
	'EQ'           reduce using rule 2
	'GE'           reduce using rule 2
	'GEQ'          reduce using rule 2
	'LE'           reduce using rule 2
	'LEQ'          reduce using rule 2
	'MINUS'        reduce using rule 2
	'MOD'          reduce using rule 2
	'NEQ'          reduce using rule 2
	'PLUS'         reduce using rule 2
	'THEN'         reduce using rule 2
	'TIMES'        reduce using rule 2
	'TO'           reduce using rule 2
	']'            reduce using rule 2


State 23

	Command -> 'WHILE' Condition . 'DO' ListCommand 'ENDWHILE'    (rule 14)

	'DO'           shift, and enter state 53


State 24

	Condition -> Value . 'EQ' Value                     (rule 26)
	Condition -> Value . 'NEQ' Value                    (rule 27)
	Condition -> Value . 'LE' Value                     (rule 28)
	Condition -> Value . 'GE' Value                     (rule 29)
	Condition -> Value . 'LEQ' Value                    (rule 30)
	Condition -> Value . 'GEQ' Value                    (rule 31)

	'EQ'           shift, and enter state 47
	'GE'           shift, and enter state 48
	'GEQ'          shift, and enter state 49
	'LE'           shift, and enter state 50
	'LEQ'          shift, and enter state 51
	'NEQ'          shift, and enter state 52


State 25

	Command -> 'REPEAT' ListCommand . 'UNTIL' Condition ';'    (rule 15)

	'UNTIL'        shift, and enter state 46


State 26

	Command -> 'READ' Identifier . ';'                  (rule 18)

	';'            shift, and enter state 45


State 27

	Command -> 'IF' Condition . 'THEN' ListCommand 'ELSE' ListCommand 'ENDIF'    (rule 12)
	Command -> 'IF' Condition . 'THEN' ListCommand 'ENDIF'    (rule 13)

	'THEN'         shift, and enter state 44


State 28

	Command -> 'FOR' Pidentifier . 'FROM' Value 'TO' Value 'DO' ListCommand 'ENDFOR'    (rule 16)
	Command -> 'FOR' Pidentifier . 'FROM' Value 'DOWNTO' Value 'DO' ListCommand 'ENDFOR'    (rule 17)

	'FROM'         shift, and enter state 43


State 29

	Command -> Identifier 'ASSIGN' . Expression ';'     (rule 11)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Expression     goto state 41
	Value          goto state 42
	Identifier     goto state 21

State 30

	ListCommand -> Command ListCommand .                (rule 10)

	'ELSE'         reduce using rule 10
	'END'          reduce using rule 10
	'ENDFOR'       reduce using rule 10
	'ENDIF'        reduce using rule 10
	'ENDWHILE'     reduce using rule 10
	'UNTIL'        reduce using rule 10


State 31

	Program -> 'BEGIN' ListCommand 'END' .              (rule 4)

	%eof           reduce using rule 4


State 32

	Identifier -> Pidentifier '[' . Pidentifier ']'     (rule 35)
	Identifier -> Pidentifier '[' . Number ']'          (rule 36)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 39
	Number         goto state 40

State 33

	ListDeclaration -> Declaration ',' . ListDeclaration    (rule 6)

	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 6
	ListDeclarationgoto state 38
	Declaration    goto state 8

State 34

	Program -> 'VAR' ListDeclaration 'BEGIN' . ListCommand 'END'    (rule 3)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 37
	Command        goto state 11
	Identifier     goto state 12

State 35

	Declaration -> Pidentifier '[' . Number ':' Number ']'    (rule 8)

	L_Number       shift, and enter state 22

	Number         goto state 36

State 36

	Declaration -> Pidentifier '[' Number . ':' Number ']'    (rule 8)

	':'            shift, and enter state 74


State 37

	Program -> 'VAR' ListDeclaration 'BEGIN' ListCommand . 'END'    (rule 3)

	'END'          shift, and enter state 73


State 38

	ListDeclaration -> Declaration ',' ListDeclaration .    (rule 6)

	'BEGIN'        reduce using rule 6


State 39

	Identifier -> Pidentifier '[' Pidentifier . ']'     (rule 35)

	']'            shift, and enter state 72


State 40

	Identifier -> Pidentifier '[' Number . ']'          (rule 36)

	']'            shift, and enter state 71


State 41

	Command -> Identifier 'ASSIGN' Expression . ';'     (rule 11)

	';'            shift, and enter state 70


State 42

	Expression -> Value .                               (rule 20)
	Expression -> Value . 'PLUS' Value                  (rule 21)
	Expression -> Value . 'MINUS' Value                 (rule 22)
	Expression -> Value . 'TIMES' Value                 (rule 23)
	Expression -> Value . 'DIV' Value                   (rule 24)
	Expression -> Value . 'MOD' Value                   (rule 25)

	';'            reduce using rule 20
	'DIV'          shift, and enter state 65
	'MINUS'        shift, and enter state 66
	'MOD'          shift, and enter state 67
	'PLUS'         shift, and enter state 68
	'TIMES'        shift, and enter state 69


State 43

	Command -> 'FOR' Pidentifier 'FROM' . Value 'TO' Value 'DO' ListCommand 'ENDFOR'    (rule 16)
	Command -> 'FOR' Pidentifier 'FROM' . Value 'DOWNTO' Value 'DO' ListCommand 'ENDFOR'    (rule 17)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 64
	Identifier     goto state 21

State 44

	Command -> 'IF' Condition 'THEN' . ListCommand 'ELSE' ListCommand 'ENDIF'    (rule 12)
	Command -> 'IF' Condition 'THEN' . ListCommand 'ENDIF'    (rule 13)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 63
	Command        goto state 11
	Identifier     goto state 12

State 45

	Command -> 'READ' Identifier ';' .                  (rule 18)

	'ELSE'         reduce using rule 18
	'END'          reduce using rule 18
	'ENDFOR'       reduce using rule 18
	'ENDIF'        reduce using rule 18
	'ENDWHILE'     reduce using rule 18
	'FOR'          reduce using rule 18
	'IF'           reduce using rule 18
	'READ'         reduce using rule 18
	'REPEAT'       reduce using rule 18
	'UNTIL'        reduce using rule 18
	'WHILE'        reduce using rule 18
	'WRITE'        reduce using rule 18
	L_Pidentifier  reduce using rule 18


State 46

	Command -> 'REPEAT' ListCommand 'UNTIL' . Condition ';'    (rule 15)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Condition      goto state 62
	Value          goto state 24
	Identifier     goto state 21

State 47

	Condition -> Value 'EQ' . Value                     (rule 26)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 61
	Identifier     goto state 21

State 48

	Condition -> Value 'GE' . Value                     (rule 29)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 60
	Identifier     goto state 21

State 49

	Condition -> Value 'GEQ' . Value                    (rule 31)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 59
	Identifier     goto state 21

State 50

	Condition -> Value 'LE' . Value                     (rule 28)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 58
	Identifier     goto state 21

State 51

	Condition -> Value 'LEQ' . Value                    (rule 30)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 57
	Identifier     goto state 21

State 52

	Condition -> Value 'NEQ' . Value                    (rule 27)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 56
	Identifier     goto state 21

State 53

	Command -> 'WHILE' Condition 'DO' . ListCommand 'ENDWHILE'    (rule 14)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 55
	Command        goto state 11
	Identifier     goto state 12

State 54

	Command -> 'WRITE' Value ';' .                      (rule 19)

	'ELSE'         reduce using rule 19
	'END'          reduce using rule 19
	'ENDFOR'       reduce using rule 19
	'ENDIF'        reduce using rule 19
	'ENDWHILE'     reduce using rule 19
	'FOR'          reduce using rule 19
	'IF'           reduce using rule 19
	'READ'         reduce using rule 19
	'REPEAT'       reduce using rule 19
	'UNTIL'        reduce using rule 19
	'WHILE'        reduce using rule 19
	'WRITE'        reduce using rule 19
	L_Pidentifier  reduce using rule 19


State 55

	Command -> 'WHILE' Condition 'DO' ListCommand . 'ENDWHILE'    (rule 14)

	'ENDWHILE'     shift, and enter state 86


State 56

	Condition -> Value 'NEQ' Value .                    (rule 27)

	';'            reduce using rule 27
	'DO'           reduce using rule 27
	'THEN'         reduce using rule 27


State 57

	Condition -> Value 'LEQ' Value .                    (rule 30)

	';'            reduce using rule 30
	'DO'           reduce using rule 30
	'THEN'         reduce using rule 30


State 58

	Condition -> Value 'LE' Value .                     (rule 28)

	';'            reduce using rule 28
	'DO'           reduce using rule 28
	'THEN'         reduce using rule 28


State 59

	Condition -> Value 'GEQ' Value .                    (rule 31)

	';'            reduce using rule 31
	'DO'           reduce using rule 31
	'THEN'         reduce using rule 31


State 60

	Condition -> Value 'GE' Value .                     (rule 29)

	';'            reduce using rule 29
	'DO'           reduce using rule 29
	'THEN'         reduce using rule 29


State 61

	Condition -> Value 'EQ' Value .                     (rule 26)

	';'            reduce using rule 26
	'DO'           reduce using rule 26
	'THEN'         reduce using rule 26


State 62

	Command -> 'REPEAT' ListCommand 'UNTIL' Condition . ';'    (rule 15)

	';'            shift, and enter state 85


State 63

	Command -> 'IF' Condition 'THEN' ListCommand . 'ELSE' ListCommand 'ENDIF'    (rule 12)
	Command -> 'IF' Condition 'THEN' ListCommand . 'ENDIF'    (rule 13)

	'ELSE'         shift, and enter state 83
	'ENDIF'        shift, and enter state 84


State 64

	Command -> 'FOR' Pidentifier 'FROM' Value . 'TO' Value 'DO' ListCommand 'ENDFOR'    (rule 16)
	Command -> 'FOR' Pidentifier 'FROM' Value . 'DOWNTO' Value 'DO' ListCommand 'ENDFOR'    (rule 17)

	'DOWNTO'       shift, and enter state 81
	'TO'           shift, and enter state 82


State 65

	Expression -> Value 'DIV' . Value                   (rule 24)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 80
	Identifier     goto state 21

State 66

	Expression -> Value 'MINUS' . Value                 (rule 22)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 79
	Identifier     goto state 21

State 67

	Expression -> Value 'MOD' . Value                   (rule 25)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 78
	Identifier     goto state 21

State 68

	Expression -> Value 'PLUS' . Value                  (rule 21)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 77
	Identifier     goto state 21

State 69

	Expression -> Value 'TIMES' . Value                 (rule 23)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 76
	Identifier     goto state 21

State 70

	Command -> Identifier 'ASSIGN' Expression ';' .     (rule 11)

	'ELSE'         reduce using rule 11
	'END'          reduce using rule 11
	'ENDFOR'       reduce using rule 11
	'ENDIF'        reduce using rule 11
	'ENDWHILE'     reduce using rule 11
	'FOR'          reduce using rule 11
	'IF'           reduce using rule 11
	'READ'         reduce using rule 11
	'REPEAT'       reduce using rule 11
	'UNTIL'        reduce using rule 11
	'WHILE'        reduce using rule 11
	'WRITE'        reduce using rule 11
	L_Pidentifier  reduce using rule 11


State 71

	Identifier -> Pidentifier '[' Number ']' .          (rule 36)

	';'            reduce using rule 36
	'ASSIGN'       reduce using rule 36
	'DIV'          reduce using rule 36
	'DO'           reduce using rule 36
	'DOWNTO'       reduce using rule 36
	'EQ'           reduce using rule 36
	'GE'           reduce using rule 36
	'GEQ'          reduce using rule 36
	'LE'           reduce using rule 36
	'LEQ'          reduce using rule 36
	'MINUS'        reduce using rule 36
	'MOD'          reduce using rule 36
	'NEQ'          reduce using rule 36
	'PLUS'         reduce using rule 36
	'THEN'         reduce using rule 36
	'TIMES'        reduce using rule 36
	'TO'           reduce using rule 36


State 72

	Identifier -> Pidentifier '[' Pidentifier ']' .     (rule 35)

	';'            reduce using rule 35
	'ASSIGN'       reduce using rule 35
	'DIV'          reduce using rule 35
	'DO'           reduce using rule 35
	'DOWNTO'       reduce using rule 35
	'EQ'           reduce using rule 35
	'GE'           reduce using rule 35
	'GEQ'          reduce using rule 35
	'LE'           reduce using rule 35
	'LEQ'          reduce using rule 35
	'MINUS'        reduce using rule 35
	'MOD'          reduce using rule 35
	'NEQ'          reduce using rule 35
	'PLUS'         reduce using rule 35
	'THEN'         reduce using rule 35
	'TIMES'        reduce using rule 35
	'TO'           reduce using rule 35


State 73

	Program -> 'VAR' ListDeclaration 'BEGIN' ListCommand 'END' .    (rule 3)

	%eof           reduce using rule 3


State 74

	Declaration -> Pidentifier '[' Number ':' . Number ']'    (rule 8)

	L_Number       shift, and enter state 22

	Number         goto state 75

State 75

	Declaration -> Pidentifier '[' Number ':' Number . ']'    (rule 8)

	']'            shift, and enter state 90


State 76

	Expression -> Value 'TIMES' Value .                 (rule 23)

	';'            reduce using rule 23


State 77

	Expression -> Value 'PLUS' Value .                  (rule 21)

	';'            reduce using rule 21


State 78

	Expression -> Value 'MOD' Value .                   (rule 25)

	';'            reduce using rule 25


State 79

	Expression -> Value 'MINUS' Value .                 (rule 22)

	';'            reduce using rule 22


State 80

	Expression -> Value 'DIV' Value .                   (rule 24)

	';'            reduce using rule 24


State 81

	Command -> 'FOR' Pidentifier 'FROM' Value 'DOWNTO' . Value 'DO' ListCommand 'ENDFOR'    (rule 17)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 89
	Identifier     goto state 21

State 82

	Command -> 'FOR' Pidentifier 'FROM' Value 'TO' . Value 'DO' ListCommand 'ENDFOR'    (rule 16)

	L_Pidentifier  shift, and enter state 2
	L_Number       shift, and enter state 22

	Pidentifier    goto state 9
	Number         goto state 19
	Value          goto state 88
	Identifier     goto state 21

State 83

	Command -> 'IF' Condition 'THEN' ListCommand 'ELSE' . ListCommand 'ENDIF'    (rule 12)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 87
	Command        goto state 11
	Identifier     goto state 12

State 84

	Command -> 'IF' Condition 'THEN' ListCommand 'ENDIF' .    (rule 13)

	'ELSE'         reduce using rule 13
	'END'          reduce using rule 13
	'ENDFOR'       reduce using rule 13
	'ENDIF'        reduce using rule 13
	'ENDWHILE'     reduce using rule 13
	'FOR'          reduce using rule 13
	'IF'           reduce using rule 13
	'READ'         reduce using rule 13
	'REPEAT'       reduce using rule 13
	'UNTIL'        reduce using rule 13
	'WHILE'        reduce using rule 13
	'WRITE'        reduce using rule 13
	L_Pidentifier  reduce using rule 13


State 85

	Command -> 'REPEAT' ListCommand 'UNTIL' Condition ';' .    (rule 15)

	'ELSE'         reduce using rule 15
	'END'          reduce using rule 15
	'ENDFOR'       reduce using rule 15
	'ENDIF'        reduce using rule 15
	'ENDWHILE'     reduce using rule 15
	'FOR'          reduce using rule 15
	'IF'           reduce using rule 15
	'READ'         reduce using rule 15
	'REPEAT'       reduce using rule 15
	'UNTIL'        reduce using rule 15
	'WHILE'        reduce using rule 15
	'WRITE'        reduce using rule 15
	L_Pidentifier  reduce using rule 15


State 86

	Command -> 'WHILE' Condition 'DO' ListCommand 'ENDWHILE' .    (rule 14)

	'ELSE'         reduce using rule 14
	'END'          reduce using rule 14
	'ENDFOR'       reduce using rule 14
	'ENDIF'        reduce using rule 14
	'ENDWHILE'     reduce using rule 14
	'FOR'          reduce using rule 14
	'IF'           reduce using rule 14
	'READ'         reduce using rule 14
	'REPEAT'       reduce using rule 14
	'UNTIL'        reduce using rule 14
	'WHILE'        reduce using rule 14
	'WRITE'        reduce using rule 14
	L_Pidentifier  reduce using rule 14


State 87

	Command -> 'IF' Condition 'THEN' ListCommand 'ELSE' ListCommand . 'ENDIF'    (rule 12)

	'ENDIF'        shift, and enter state 93


State 88

	Command -> 'FOR' Pidentifier 'FROM' Value 'TO' Value . 'DO' ListCommand 'ENDFOR'    (rule 16)

	'DO'           shift, and enter state 92


State 89

	Command -> 'FOR' Pidentifier 'FROM' Value 'DOWNTO' Value . 'DO' ListCommand 'ENDFOR'    (rule 17)

	'DO'           shift, and enter state 91


State 90

	Declaration -> Pidentifier '[' Number ':' Number ']' .    (rule 8)

	','            reduce using rule 8
	'BEGIN'        reduce using rule 8


State 91

	Command -> 'FOR' Pidentifier 'FROM' Value 'DOWNTO' Value 'DO' . ListCommand 'ENDFOR'    (rule 17)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 95
	Command        goto state 11
	Identifier     goto state 12

State 92

	Command -> 'FOR' Pidentifier 'FROM' Value 'TO' Value 'DO' . ListCommand 'ENDFOR'    (rule 16)

	'FOR'          shift, and enter state 13
	'IF'           shift, and enter state 14
	'READ'         shift, and enter state 15
	'REPEAT'       shift, and enter state 16
	'WHILE'        shift, and enter state 17
	'WRITE'        shift, and enter state 18
	L_Pidentifier  shift, and enter state 2

	Pidentifier    goto state 9
	ListCommand    goto state 94
	Command        goto state 11
	Identifier     goto state 12

State 93

	Command -> 'IF' Condition 'THEN' ListCommand 'ELSE' ListCommand 'ENDIF' .    (rule 12)

	'ELSE'         reduce using rule 12
	'END'          reduce using rule 12
	'ENDFOR'       reduce using rule 12
	'ENDIF'        reduce using rule 12
	'ENDWHILE'     reduce using rule 12
	'FOR'          reduce using rule 12
	'IF'           reduce using rule 12
	'READ'         reduce using rule 12
	'REPEAT'       reduce using rule 12
	'UNTIL'        reduce using rule 12
	'WHILE'        reduce using rule 12
	'WRITE'        reduce using rule 12
	L_Pidentifier  reduce using rule 12


State 94

	Command -> 'FOR' Pidentifier 'FROM' Value 'TO' Value 'DO' ListCommand . 'ENDFOR'    (rule 16)

	'ENDFOR'       shift, and enter state 97


State 95

	Command -> 'FOR' Pidentifier 'FROM' Value 'DOWNTO' Value 'DO' ListCommand . 'ENDFOR'    (rule 17)

	'ENDFOR'       shift, and enter state 96


State 96

	Command -> 'FOR' Pidentifier 'FROM' Value 'DOWNTO' Value 'DO' ListCommand 'ENDFOR' .    (rule 17)

	'ELSE'         reduce using rule 17
	'END'          reduce using rule 17
	'ENDFOR'       reduce using rule 17
	'ENDIF'        reduce using rule 17
	'ENDWHILE'     reduce using rule 17
	'FOR'          reduce using rule 17
	'IF'           reduce using rule 17
	'READ'         reduce using rule 17
	'REPEAT'       reduce using rule 17
	'UNTIL'        reduce using rule 17
	'WHILE'        reduce using rule 17
	'WRITE'        reduce using rule 17
	L_Pidentifier  reduce using rule 17


State 97

	Command -> 'FOR' Pidentifier 'FROM' Value 'TO' Value 'DO' ListCommand 'ENDFOR' .    (rule 16)

	'ELSE'         reduce using rule 16
	'END'          reduce using rule 16
	'ENDFOR'       reduce using rule 16
	'ENDIF'        reduce using rule 16
	'ENDWHILE'     reduce using rule 16
	'FOR'          reduce using rule 16
	'IF'           reduce using rule 16
	'READ'         reduce using rule 16
	'REPEAT'       reduce using rule 16
	'UNTIL'        reduce using rule 16
	'WHILE'        reduce using rule 16
	'WRITE'        reduce using rule 16
	L_Pidentifier  reduce using rule 16


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 37
Number of terminals: 38
Number of non-terminals: 12
Number of states: 98
